<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541383178746.png" alt="1541383178746"></p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384366413.png" alt="1541384366413"></p><h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541383817248.png" alt="1541383817248"></p><p>给C++文件起个名称，然后点击添加即可。</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384140042.png" alt="1541384140042"></p><h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main() &#123;cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541384818688.png" alt="1541384818688"></p><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，&#x3D;&#x3D;对该行代码说明&#x3D;&#x3D;</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，&#x3D;&#x3D;对该段代码做整体说明&#x3D;&#x3D;</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main() &#123;&#x2F;&#x2F;变量的定义&#x2F;&#x2F;语法：数据类型  变量名 &#x3D; 初始值int a &#x3D; 10;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p><ul><li>&#x3D;&#x3D;通常在文件上方定义&#x3D;&#x3D;，表示一个常量</li></ul></li><li><p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p><ul><li>&#x3D;&#x3D;通常在变量定义前加关键字const&#x3D;&#x3D;，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1、宏常量#define day 7int main() &#123;cout &lt;&lt; &quot;一周里总共有 &quot; &lt;&lt; day &lt;&lt; &quot; 天&quot; &lt;&lt; endl;&#x2F;&#x2F;day &#x3D; 8;  &#x2F;&#x2F;报错，宏常量不可以修改&#x2F;&#x2F;2、const修饰变量const int month &#x3D; 12;cout &lt;&lt; &quot;一年里总共有 &quot; &lt;&lt; month &lt;&lt; &quot; 个月份&quot; &lt;&lt; endl;&#x2F;&#x2F;month &#x3D; 24; &#x2F;&#x2F;报错，常量是不可以修改的system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是&#x3D;&#x3D;整数类型&#x3D;&#x3D;的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以&#x3D;&#x3D;统计数据类型所占内存大小&#x3D;&#x3D;</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;cout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(short) &lt;&lt; endl;cout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;cout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;cout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p><strong>整型结论</strong>：&#x3D;&#x3D;short &lt; int &lt;&#x3D; long &lt;&#x3D; long long&#x3D;&#x3D;</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于&#x3D;&#x3D;表示小数&#x3D;&#x3D;</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;float f1 &#x3D; 3.14f;double d1 &#x3D; 3.14;cout &lt;&lt; f1 &lt;&lt; endl;cout &lt;&lt; d1&lt;&lt; endl;cout &lt;&lt; &quot;float  sizeof &#x3D; &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl;cout &lt;&lt; &quot;double sizeof &#x3D; &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl;&#x2F;&#x2F;科学计数法float f2 &#x3D; 3e2; &#x2F;&#x2F; 3 * 10 ^ 2 cout &lt;&lt; &quot;f2 &#x3D; &quot; &lt;&lt; f2 &lt;&lt; endl;float f3 &#x3D; 3e-2;  &#x2F;&#x2F; 3 * 0.1 ^ 2cout &lt;&lt; &quot;f3 &#x3D; &quot; &lt;&lt; f3 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用&#x3D;&#x3D;1个字节&#x3D;&#x3D;。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;char ch &#x3D; &#39;a&#39;;cout &lt;&lt; ch &lt;&lt; endl;cout &lt;&lt; sizeof(char) &lt;&lt; endl;&#x2F;&#x2F;ch &#x3D; &quot;abcde&quot;; &#x2F;&#x2F;错误，不可以用双引号&#x2F;&#x2F;ch &#x3D; &#39;abcde&#39;; &#x2F;&#x2F;错误，单引号内只能引用一个字符cout &lt;&lt; (int)ch &lt;&lt; endl;  &#x2F;&#x2F;查看字符a对应的ASCII码ch &#x3D; 97; &#x2F;&#x2F;可以直接用ASCII给字符型变量赋值cout &lt;&lt; ch &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>&#x2F;</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>&#x2F;</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>&#x3D;</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>&#96;</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些&#x3D;&#x3D;不能显示出来的ASCII字符&#x3D;&#x3D;</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td><strong>\\</strong></td><td><strong>代表一个反斜线字符”&quot;</strong></td><td><strong>092</strong></td></tr><tr><td>&#39;</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>&quot;</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;cout &lt;&lt; &quot;\\&quot; &lt;&lt; endl;cout &lt;&lt; &quot;\tHello&quot; &lt;&lt; endl;cout &lt;&lt; &quot;\n&quot; &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;char str1[] &#x3D; &quot;hello world&quot;;cout &lt;&lt; str1 &lt;&lt; endl;    system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;string str &#x3D; &quot;hello world&quot;;cout &lt;&lt; str &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​</p></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件&#x3D;&#x3D;#include&lt;string&gt;&#x3D;&#x3D;</p></blockquote><h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占&#x3D;&#x3D;1个字节&#x3D;&#x3D;大小</strong></p><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;bool flag &#x3D; true;cout &lt;&lt; flag &lt;&lt; endl; &#x2F;&#x2F; 1flag &#x3D; false;cout &lt;&lt; flag &lt;&lt; endl; &#x2F;&#x2F; 0cout &lt;&lt; &quot;size of bool &#x3D; &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; &#x2F;&#x2F;1system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main()&#123;&#x2F;&#x2F;整型输入int a &#x3D; 0;cout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;cin &gt;&gt; a;cout &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F;浮点型输入double d &#x3D; 0;cout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;cin &gt;&gt; d;cout &lt;&lt; d &lt;&lt; endl;&#x2F;&#x2F;字符型输入char ch &#x3D; 0;cout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;cin &gt;&gt; ch;cout &lt;&lt; ch &lt;&lt; endl;&#x2F;&#x2F;字符串型输入string str;cout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;cin &gt;&gt; str;cout &lt;&lt; str &lt;&lt; endl;&#x2F;&#x2F;布尔类型输入bool flag &#x3D; true;cout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl;cin &gt;&gt; flag;cout &lt;&lt; flag &lt;&lt; endl;system(&quot;pause&quot;);return EXIT_SUCCESS;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>&#x2F;</td><td>除</td><td>10 &#x2F; 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a&#x3D;2; b&#x3D;++a;</td><td>a&#x3D;3; b&#x3D;3;</td></tr><tr><td>++</td><td>后置递增</td><td>a&#x3D;2; b&#x3D;a++;</td><td>a&#x3D;3; b&#x3D;2;</td></tr><tr><td>–</td><td>前置递减</td><td>a&#x3D;2; b&#x3D;–a;</td><td>a&#x3D;1; b&#x3D;1;</td></tr><tr><td>–</td><td>后置递减</td><td>a&#x3D;2; b&#x3D;a–;</td><td>a&#x3D;1; b&#x3D;2;</td></tr></tbody></table><p><strong>示例1：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;加减乘除int main() &#123;int a1 &#x3D; 10;int b1 &#x3D; 3;cout &lt;&lt; a1 + b1 &lt;&lt; endl;cout &lt;&lt; a1 - b1 &lt;&lt; endl;cout &lt;&lt; a1 * b1 &lt;&lt; endl;cout &lt;&lt; a1 &#x2F; b1 &lt;&lt; endl;  &#x2F;&#x2F;两个整数相除结果依然是整数int a2 &#x3D; 10;int b2 &#x3D; 20;cout &lt;&lt; a2 &#x2F; b2 &lt;&lt; endl; int a3 &#x3D; 10;int b3 &#x3D; 0;&#x2F;&#x2F;cout &lt;&lt; a3 &#x2F; b3 &lt;&lt; endl; &#x2F;&#x2F;报错，除数不可以为0&#x2F;&#x2F;两个小数可以相除double d1 &#x3D; 0.5;double d2 &#x3D; 0.25;cout &lt;&lt; d1 &#x2F; d2 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;取模int main() &#123;int a1 &#x3D; 10;int b1 &#x3D; 3;cout &lt;&lt; 10 % 3 &lt;&lt; endl;int a2 &#x3D; 10;int b2 &#x3D; 20;cout &lt;&lt; a2 % b2 &lt;&lt; endl;int a3 &#x3D; 10;int b3 &#x3D; 0;&#x2F;&#x2F;cout &lt;&lt; a3 % b3 &lt;&lt; endl; &#x2F;&#x2F;取模运算时，除数也不能为0&#x2F;&#x2F;两个小数不可以取模double d1 &#x3D; 3.14;double d2 &#x3D; 1.1;&#x2F;&#x2F;cout &lt;&lt; d1 % d2 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;递增int main() &#123;&#x2F;&#x2F;后置递增int a &#x3D; 10;a++; &#x2F;&#x2F;等价于a &#x3D; a + 1cout &lt;&lt; a &lt;&lt; endl; &#x2F;&#x2F; 11&#x2F;&#x2F;前置递增int b &#x3D; 10;++b;cout &lt;&lt; b &lt;&lt; endl; &#x2F;&#x2F; 11&#x2F;&#x2F;区别&#x2F;&#x2F;前置递增先对变量进行++，再计算表达式int a2 &#x3D; 10;int b2 &#x3D; ++a2 * 10;cout &lt;&lt; b2 &lt;&lt; endl;&#x2F;&#x2F;后置递增先计算表达式，后对变量进行++int a3 &#x3D; 10;int b3 &#x3D; a3++ * 10;cout &lt;&lt; b3 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>a&#x3D;2; b&#x3D;3;</td><td>a&#x3D;2; b&#x3D;3;</td></tr><tr><td>+&#x3D;</td><td>加等于</td><td>a&#x3D;0; a+&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>-&#x3D;</td><td>减等于</td><td>a&#x3D;5; a-&#x3D;3;</td><td>a&#x3D;2;</td></tr><tr><td>*&#x3D;</td><td>乘等于</td><td>a&#x3D;2; a*&#x3D;2;</td><td>a&#x3D;4;</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等于</td><td>a&#x3D;4; a&#x2F;&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>%&#x3D;</td><td>模等于</td><td>a&#x3D;3; a%2;</td><td>a&#x3D;1;</td></tr></tbody></table><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;赋值运算符&#x2F;&#x2F; &#x3D;int a &#x3D; 10;a &#x3D; 100;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; +&#x3D;a &#x3D; 10;a +&#x3D; 2; &#x2F;&#x2F; a &#x3D; a + 2;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; -&#x3D;a &#x3D; 10;a -&#x3D; 2; &#x2F;&#x2F; a &#x3D; a - 2cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; *&#x3D;a &#x3D; 10;a *&#x3D; 2; &#x2F;&#x2F; a &#x3D; a * 2cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; &#x2F;&#x3D;a &#x3D; 10;a &#x2F;&#x3D; 2;  &#x2F;&#x2F; a &#x3D; a &#x2F; 2;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; %&#x3D;a &#x3D; 10;a %&#x3D; 2;  &#x2F;&#x2F; a &#x3D; a % 2;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等于</td><td>4 &#x3D;&#x3D; 3</td><td>0</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>4 !&#x3D; 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>4 &lt;&#x3D; 3</td><td>0</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>4 &gt;&#x3D; 1</td><td>1</td></tr></tbody></table><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int b &#x3D; 20;cout &lt;&lt; (a &#x3D;&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 0 cout &lt;&lt; (a !&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 1cout &lt;&lt; (a &gt; b) &lt;&lt; endl; &#x2F;&#x2F; 0cout &lt;&lt; (a &lt; b) &lt;&lt; endl; &#x2F;&#x2F; 1cout &lt;&lt; (a &gt;&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 0cout &lt;&lt; (a &lt;&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 1system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：C和C++ 语言的比较运算中， &#x3D;&#x3D;“真”用数字“1”来表示， “假”用数字“0”来表示。&#x3D;&#x3D; </p></blockquote><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;逻辑运算符  --- 非int main() &#123;int a &#x3D; 10;cout &lt;&lt; !a &lt;&lt; endl; &#x2F;&#x2F; 0cout &lt;&lt; !!a &lt;&lt; endl; &#x2F;&#x2F; 1system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;逻辑运算符  --- 与int main() &#123;int a &#x3D; 10;int b &#x3D; 10;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;&#x2F;&#x2F; 1a &#x3D; 10;b &#x3D; 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;&#x2F;&#x2F; 0 a &#x3D; 0;b &#x3D; 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;&#x2F;&#x2F; 0system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：逻辑&#x3D;&#x3D;与&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同真为真，其余为假&#x3D;&#x3D;</p></blockquote><p><strong>示例3：</strong>逻辑或</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;逻辑运算符  --- 或int main() &#123;int a &#x3D; 10;int b &#x3D; 10;cout &lt;&lt; (a || b) &lt;&lt; endl;&#x2F;&#x2F; 1a &#x3D; 10;b &#x3D; 0;cout &lt;&lt; (a || b) &lt;&lt; endl;&#x2F;&#x2F; 1 a &#x3D; 0;b &#x3D; 0;cout &lt;&lt; (a || b) &lt;&lt; endl;&#x2F;&#x2F; 0system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>逻辑&#x3D;&#x3D;或&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同假为假，其余为真&#x3D;&#x3D;</p></blockquote><h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C&#x2F;C++支持最基本的三种程序运行结构：&#x3D;&#x3D;顺序结构、选择结构、循环结构&#x3D;&#x3D;</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p><p>​</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002.png" alt="img"></p><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;选择结构-单行if语句&#x2F;&#x2F;输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印int score &#x3D; 0;cout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl;cin &gt;&gt; score;cout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl;&#x2F;&#x2F;if语句&#x2F;&#x2F;注意事项，在if判断语句后面，不要加分号if (score &gt; 600)&#123;cout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​</p></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li></ol><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541662519170.png" alt="img"></p><p>​</p><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int score &#x3D; 0;cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600)&#123;cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;我未考上一本大学&quot; &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ol start="3"><li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li></ol><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541662566808.png" alt="img"></p><p>​</p><p>​</p><p>​</p><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int score &#x3D; 0;cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600)&#123;cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;&#125;else if (score &gt; 500)&#123;cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;&#125;else if (score &gt; 400)&#123;cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​</p><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() &#123;int score &#x3D; 0;cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600)&#123;cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;if (score &gt; 700)&#123;cout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl;&#125;else if (score &gt; 650)&#123;cout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl;&#125;&#125;else if (score &gt; 500)&#123;cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;&#125;else if (score &gt; 400)&#123;cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg" alt="三只小猪"></p><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int b &#x3D; 20;int c &#x3D; 0;c &#x3D; a &gt; b ? a : b;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;&#x2F;&#x2F;C++中三目运算符返回的是变量,可以继续赋值(a &gt; b ? a : b) &#x3D; 100;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">switch(表达式)&#123;case 结果1：执行语句;break;case 结果2：执行语句;break;...default:执行语句;break;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;请给电影评分 &#x2F;&#x2F;10 ~ 9   经典   &#x2F;&#x2F; 8 ~ 7   非常好&#x2F;&#x2F; 6 ~ 5   一般&#x2F;&#x2F; 5分以下 烂片int score &#x3D; 0;cout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl;cin &gt;&gt; score;switch (score)&#123;case 10:case 9:cout &lt;&lt; &quot;经典&quot; &lt;&lt; endl;break;case 8:cout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl;break;case 7:case 6:cout &lt;&lt; &quot;一般&quot; &lt;&lt; endl;break;default:cout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl;break;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p><p><strong>解释：</strong>&#x3D;&#x3D;只要循环条件的结果为真，就执行循环语句&#x3D;&#x3D;</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541668640382.png" alt="img"></p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int num &#x3D; 0;while (num &lt; 10)&#123;cout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;num++;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><p><strong>while循环练习案例：</strong>&#x3D;&#x3D;猜数字&#x3D;&#x3D;</p><p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg" alt="猜数字"></p><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于&#x3D;&#x3D;do…while会先执行一次循环语句&#x3D;&#x3D;，再判断循环条件</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/clip_image002-1541671163478.png" alt="img"></p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int num &#x3D; 0;do&#123;cout &lt;&lt; num &lt;&lt; endl;num++;&#125; while (num &lt; 10);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><p><strong>练习案例：水仙花数</strong></p><p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 &#x3D; 153</p><p>请利用do…while语句，求出所有3位数中的水仙花数</p><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;for (int i &#x3D; 0; i &lt; 10; i++)&#123;cout &lt;&lt; i &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>详解：</strong></p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541673704101.png" alt="1541673704101"></p><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/timg.gif" alt="timg"></p><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541676003486.png" alt="1541676003486"></p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;外层循环执行1次，内层循环执行1轮for (int i &#x3D; 0; i &lt; 10; i++)&#123;for (int j &#x3D; 0; j &lt; 10; j++)&#123;cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>练习案例：</strong>乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/0006018857256120_b.jpg" alt="0006018857256120_b"></p><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出&#x3D;&#x3D;选择结构&#x3D;&#x3D;或者&#x3D;&#x3D;循环结构&#x3D;&#x3D;</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;1、在switch 语句中使用breakcout &lt;&lt; &quot;请选择您挑战副本的难度：&quot; &lt;&lt; endl;cout &lt;&lt; &quot;1、普通&quot; &lt;&lt; endl;cout &lt;&lt; &quot;2、中等&quot; &lt;&lt; endl;cout &lt;&lt; &quot;3、困难&quot; &lt;&lt; endl;int num &#x3D; 0;cin &gt;&gt; num;switch (num)&#123;case 1:cout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl;break;case 2:cout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl;break;case 3:cout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl;break;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>示例2：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;2、在循环语句中用breakfor (int i &#x3D; 0; i &lt; 10; i++)&#123;if (i &#x3D;&#x3D; 5)&#123;break; &#x2F;&#x2F;跳出循环语句&#125;cout &lt;&lt; i &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>示例3：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;在嵌套循环语句中使用break，退出内层循环for (int i &#x3D; 0; i &lt; 10; i++)&#123;for (int j &#x3D; 0; j &lt; 10; j++)&#123;if (j &#x3D;&#x3D; 5)&#123;break;&#125;cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在&#x3D;&#x3D;循环语句&#x3D;&#x3D;中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;for (int i &#x3D; 0; i &lt; 100; i++)&#123;if (i % 2 &#x3D;&#x3D; 0)&#123;continue;&#125;cout &lt;&lt; i &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;goto FLAG;cout &lt;&lt; &quot;2&quot; &lt;&lt; endl;cout &lt;&lt; &quot;3&quot; &lt;&lt; endl;cout &lt;&lt; &quot;4&quot; &lt;&lt; endl;FLAG:cout &lt;&lt; &quot;5&quot; &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1：</strong>数组中的每个&#x3D;&#x3D;数据元素都是相同的数据类型&#x3D;&#x3D;</p><p><strong>特点2：</strong>数组是由&#x3D;&#x3D;连续的内存&#x3D;&#x3D;位置组成的</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541748375356.png" alt="1541748375356"></p><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li><li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li></ol><p>示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;定义方式1&#x2F;&#x2F;数据类型 数组名[元素个数];int score[10];&#x2F;&#x2F;利用下标赋值score[0] &#x3D; 100;score[1] &#x3D; 99;score[2] &#x3D; 85;&#x2F;&#x2F;利用下标输出cout &lt;&lt; score[0] &lt;&lt; endl;cout &lt;&lt; score[1] &lt;&lt; endl;cout &lt;&lt; score[2] &lt;&lt; endl;&#x2F;&#x2F;第二种定义方式&#x2F;&#x2F;数据类型 数组名[元素个数] &#x3D;  &#123;值1，值2 ，值3 ...&#125;;&#x2F;&#x2F;如果&#123;&#125;内不足10个数据，剩余数据用0补全int score2[10] &#x3D; &#123; 100, 90,80,70,60,50,40,30,20,10 &#125;;&#x2F;&#x2F;逐个输出&#x2F;&#x2F;cout &lt;&lt; score2[0] &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; score2[1] &lt;&lt; endl;&#x2F;&#x2F;一个一个输出太麻烦，因此可以利用循环进行输出for (int i &#x3D; 0; i &lt; 10; i++)&#123;cout &lt;&lt; score2[i] &lt;&lt; endl;&#125;&#x2F;&#x2F;定义方式3&#x2F;&#x2F;数据类型 数组名[] &#x3D;  &#123;值1，值2 ，值3 ...&#125;;int score3[] &#x3D; &#123; 100,90,80,70,60,50,40,30,20,10 &#125;;for (int i &#x3D; 0; i &lt; 10; i++)&#123;cout &lt;&lt; score3[i] &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;数组名用途&#x2F;&#x2F;1、可以获取整个数组占用内存空间大小int arr[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;cout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) &#x2F; sizeof(arr[0]) &lt;&lt; endl;&#x2F;&#x2F;2、可以通过数组名获取到数组首地址cout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; (int)arr &lt;&lt; endl;cout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;cout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;&#x2F;&#x2F;arr &#x3D; 100; 错误，数组名是常量，因此不可以赋值system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><p><strong>练习案例1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] &#x3D; {300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><p><strong>练习案例2：</strong>数组元素逆置</p><p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541905327273.png" alt="1541905327273"></p><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int arr[9] &#x3D; &#123; 4,2,8,0,5,7,1,3,9 &#125;;for (int i &#x3D; 0; i &lt; 9 - 1; i++)&#123;for (int j &#x3D; 0; j &lt; 9 - 1 - i; j++)&#123;if (arr[j] &gt; arr[j + 1])&#123;int temp &#x3D; arr[j];arr[j] &#x3D; arr[j + 1];arr[j + 1] &#x3D; temp;&#125;&#125;&#125;for (int i &#x3D; 0; i &lt; 9; i++)&#123;cout &lt;&lt; arr[i] &lt;&lt; endl;&#125;    system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><p><img src="/2024/03/30/C++%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1541905559138.png" alt="1541905559138"></p><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li></ol><blockquote><p>建议：以上4种定义方式，利用&#x3D;&#x3D;第二种更加直观，提高代码的可读性&#x3D;&#x3D;</p></blockquote><p>示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;方式1  &#x2F;&#x2F;数组类型 数组名 [行数][列数]int arr[2][3];arr[0][0] &#x3D; 1;arr[0][1] &#x3D; 2;arr[0][2] &#x3D; 3;arr[1][0] &#x3D; 4;arr[1][1] &#x3D; 5;arr[1][2] &#x3D; 6;for (int i &#x3D; 0; i &lt; 2; i++)&#123;for (int j &#x3D; 0; j &lt; 3; j++)&#123;cout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#125;&#x2F;&#x2F;方式2 &#x2F;&#x2F;数据类型 数组名[行数][列数] &#x3D; &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;int arr2[2][3] &#x3D;&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;&#x2F;&#x2F;方式3&#x2F;&#x2F;数据类型 数组名[行数][列数] &#x3D; &#123; 数据1，数据2 ,数据3，数据4  &#125;;int arr3[2][3] &#x3D; &#123; 1,2,3,4,5,6 &#125;; &#x2F;&#x2F;方式4 &#x2F;&#x2F;数据类型 数组名[][列数] &#x3D; &#123; 数据1，数据2 ,数据3，数据4  &#125;;int arr4[][3] &#x3D; &#123; 1,2,3,4,5,6 &#125;;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;二维数组数组名int arr[2][3] &#x3D;&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;cout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;cout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) &#x2F; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) &#x2F; sizeof(arr[0][0]) &lt;&lt; endl;&#x2F;&#x2F;地址cout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;cout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;cout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;cout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int scores[3][3] &#x3D;&#123;&#123;100,100,100&#125;,&#123;90,50,100&#125;,&#123;60,70,80&#125;,&#125;;string names[3] &#x3D; &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;for (int i &#x3D; 0; i &lt; 3; i++)&#123;int sum &#x3D; 0;for (int j &#x3D; 0; j &lt; 3; j++)&#123;sum +&#x3D; scores[i][j];&#125;cout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型 </p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句 </p><p>5、return 表达式</p><p><strong>语法：</strong> </p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">返回值类型 函数名 （参数列表）&#123;       函数体语句       return表达式&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数定义int add(int num1, int num2)&#123;int sum &#x3D; num1 + num2;return sum;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数定义int add(int num1, int num2) &#x2F;&#x2F;定义中的num1,num2称为形式参数，简称形参&#123;int sum &#x3D; num1 + num2;return sum;&#125;int main() &#123;int a &#x3D; 10;int b &#x3D; 10;&#x2F;&#x2F;调用add函数int sum &#x3D; add(a, b);&#x2F;&#x2F;调用时的a，b称为实际参数，简称实参cout &lt;&lt; &quot;sum &#x3D; &quot; &lt;&lt; sum &lt;&lt; endl;a &#x3D; 100;b &#x3D; 100;sum &#x3D; add(a, b);cout &lt;&lt; &quot;sum &#x3D; &quot; &lt;&lt; sum &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，&#x3D;&#x3D;如果形参发生，并不会影响实参&#x3D;&#x3D;</li></ul><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void swap(int num1, int num2)&#123;cout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;cout &lt;&lt; &quot;num1 &#x3D; &quot; &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; &quot;num2 &#x3D; &quot; &lt;&lt; num2 &lt;&lt; endl;int temp &#x3D; num1;num1 &#x3D; num2;num2 &#x3D; temp;cout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;cout &lt;&lt; &quot;num1 &#x3D; &quot; &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; &quot;num2 &#x3D; &quot; &lt;&lt; num2 &lt;&lt; endl;&#x2F;&#x2F;return ; 当函数声明时候，不需要返回值，可以不写return&#125;int main() &#123;int a &#x3D; 10;int b &#x3D; 20;swap(a, b);cout &lt;&lt; &quot;mian中的 a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;mian中的 b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数常见样式&#x2F;&#x2F;1、 无参无返void test01()&#123;&#x2F;&#x2F;void a &#x3D; 10; &#x2F;&#x2F;无类型不可以创建变量,原因无法分配内存cout &lt;&lt; &quot;this is test01&quot; &lt;&lt; endl;&#x2F;&#x2F;test01(); 函数调用&#125;&#x2F;&#x2F;2、 有参无返void test02(int a)&#123;cout &lt;&lt; &quot;this is test02&quot; &lt;&lt; endl;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#125;&#x2F;&#x2F;3、无参有返int test03()&#123;cout &lt;&lt; &quot;this is test03 &quot; &lt;&lt; endl;return 10;&#125;&#x2F;&#x2F;4、有参有返int test04(int a, int b)&#123;cout &lt;&lt; &quot;this is test04 &quot; &lt;&lt; endl;int sum &#x3D; a + b;return sum;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;声明可以多次，定义只能一次&#x2F;&#x2F;声明int max(int a, int b);int max(int a, int b);&#x2F;&#x2F;定义int max(int a, int b)&#123;return a &gt; b ? a : b;&#125;int main() &#123;int a &#x3D; 100;int b &#x3D; 200;cout &lt;&lt; max(a, b) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件  </li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;swap.h文件#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F;实现两个数字交换的函数声明void swap(int a, int b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;swap.cpp文件#include &quot;swap.h&quot;void swap(int a, int b)&#123;int temp &#x3D; a;a &#x3D; b;b &#x3D; temp;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;main函数文件#include &quot;swap.h&quot;int main() &#123;int a &#x3D; 100;int b &#x3D; 200;swap(a, b);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p></li><li><p>可以利用指针变量保存地址</p><p>​</p></li></ul><h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;1、指针的定义int a &#x3D; 10; &#x2F;&#x2F;定义整型变量a&#x2F;&#x2F;指针定义语法： 数据类型 * 变量名 ;int * p;&#x2F;&#x2F;指针变量赋值p &#x3D; &a; &#x2F;&#x2F;指针指向变量a的地址cout &lt;&lt; &amp;a &lt;&lt; endl; &#x2F;&#x2F;打印数据a的地址cout &lt;&lt; p &lt;&lt; endl;  &#x2F;&#x2F;打印指针变量p&#x2F;&#x2F;2、指针的使用&#x2F;&#x2F;通过*操作指针变量指向的内存cout &lt;&lt; &quot;*p &#x3D; &quot; &lt;&lt; *p &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int * p;p &#x3D; &a; &#x2F;&#x2F;指针指向数据a的地址cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;* 解引用cout &lt;&lt; sizeof(p) &lt;&lt; endl;cout &lt;&lt; sizeof(char *) &lt;&lt; endl;cout &lt;&lt; sizeof(float *) &lt;&lt; endl;cout &lt;&lt; sizeof(double *) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;指针变量p指向内存地址编号为0的空间int * p &#x3D; NULL;&#x2F;&#x2F;访问空指针报错 &#x2F;&#x2F;内存编号0 ~255为系统占用内存，不允许用户访问cout &lt;&lt; *p &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;&#x2F;&#x2F;指针变量p指向内存地址编号为0x1100的空间int * p &#x3D; (int *)0x1100;&#x2F;&#x2F;访问野指针报错 cout &lt;&lt; *p &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() &#123;int a &#x3D; 10;int b &#x3D; 10;&#x2F;&#x2F;const修饰的是指针，指针指向可以改，指针指向的值不可以更改const int * p1 &#x3D; &a; p1 &#x3D; &b; &#x2F;&#x2F;正确&#x2F;&#x2F;*p1 &#x3D; 100;  报错&#x2F;&#x2F;const修饰的是常量，指针指向不可以改，指针指向的值可以更改int * const p2 &#x3D; &a;&#x2F;&#x2F;p2 &#x3D; &b; &#x2F;&#x2F;错误*p2 &#x3D; 100; &#x2F;&#x2F;正确    &#x2F;&#x2F;const既修饰指针又修饰常量const int * const p3 &#x3D; &a;&#x2F;&#x2F;p3 &#x3D; &b; &#x2F;&#x2F;错误&#x2F;&#x2F;*p3 &#x3D; 100; &#x2F;&#x2F;错误system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p></blockquote><h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int arr[] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;int * p &#x3D; arr;  &#x2F;&#x2F;指向数组的指针cout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl;for (int i &#x3D; 0; i &lt; 10; i++)&#123;&#x2F;&#x2F;利用指针遍历数组cout &lt;&lt; *p &lt;&lt; endl;p++;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;值传递void swap1(int a ,int b)&#123;int temp &#x3D; a;a &#x3D; b; b &#x3D; temp;&#125;&#x2F;&#x2F;地址传递void swap2(int * p1, int *p2)&#123;int temp &#x3D; *p1;*p1 &#x3D; *p2;*p2 &#x3D; temp;&#125;int main() &#123;int a &#x3D; 10;int b &#x3D; 20;swap1(a, b); &#x2F;&#x2F; 值传递不会改变实参swap2(&amp;a, &amp;b); &#x2F;&#x2F;地址传递会改变实参cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] &#x3D; { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;冒泡排序函数void bubbleSort(int * arr, int len)  &#x2F;&#x2F;int * arr 也可以写为int arr[]&#123;for (int i &#x3D; 0; i &lt; len - 1; i++)&#123;for (int j &#x3D; 0; j &lt; len - 1 - i; j++)&#123;if (arr[j] &gt; arr[j + 1])&#123;int temp &#x3D; arr[j];arr[j] &#x3D; arr[j + 1];arr[j + 1] &#x3D; temp;&#125;&#125;&#125;&#125;&#x2F;&#x2F;打印数组函数void printArray(int arr[], int len)&#123;for (int i &#x3D; 0; i &lt; len; i++)&#123;cout &lt;&lt; arr[i] &lt;&lt; endl;&#125;&#125;int main() &#123;int arr[10] &#x3D; &#123; 4,3,6,9,1,2,10,8,7,5 &#125;;int len &#x3D; sizeof(arr) &#x2F; sizeof(int);bubbleSort(arr, len);printArray(arr, len);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote><h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户&#x3D;&#x3D;自定义的数据类型&#x3D;&#x3D;，允许用户存储不同的数据类型</p><h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 &#x3D; { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;stu3; &#x2F;&#x2F;结构体变量创建方式3 int main() &#123;&#x2F;&#x2F;结构体变量创建方式1struct student stu1; &#x2F;&#x2F;struct 关键字可以省略stu1.name &#x3D; &quot;张三&quot;;stu1.age &#x3D; 18;stu1.score &#x3D; 100;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl;&#x2F;&#x2F;结构体变量创建方式2struct student stu2 &#x3D; &#123; &quot;李四&quot;,19,60 &#125;;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl;stu3.name &#x3D; &quot;王五&quot;;stu3.age &#x3D; 18;stu3.score &#x3D; 80;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p></blockquote><blockquote><p>总结2：创建结构体变量时，关键字struct可以省略</p></blockquote><blockquote><p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p></blockquote><h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;int main() &#123;&#x2F;&#x2F;结构体数组struct student arr[3]&#x3D;&#123;&#123;&quot;张三&quot;,18,80 &#125;,&#123;&quot;李四&quot;,19,60 &#125;,&#123;&quot;王五&quot;,20,70 &#125;&#125;;for (int i &#x3D; 0; i &lt; 3; i++)&#123;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;&#125;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;;int main() &#123;struct student stu &#x3D; &#123; &quot;张三&quot;,18,100, &#125;;struct student * p &#x3D; &stu;p-&gt;score &#x3D; 80; &#x2F;&#x2F;指针通过 -&gt; 操作符可以访问成员cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;;&#x2F;&#x2F;教师结构体定义struct teacher&#123;    &#x2F;&#x2F;成员列表int id; &#x2F;&#x2F;职工编号string name;  &#x2F;&#x2F;教师姓名int age;   &#x2F;&#x2F;教师年龄struct student stu; &#x2F;&#x2F;子结构体 学生&#125;;int main() &#123;struct teacher t1;t1.id &#x3D; 10000;t1.name &#x3D; &quot;老王&quot;;t1.age &#x3D; 40;t1.stu.name &#x3D; &quot;张三&quot;;t1.stu.age &#x3D; 18;t1.stu.score &#x3D; 100;cout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;cout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;;&#x2F;&#x2F;值传递void printStudent(student stu )&#123;stu.age &#x3D; 28;cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;&#125;&#x2F;&#x2F;地址传递void printStudent2(student *stu)&#123;stu-&gt;age &#x3D; 28;cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;&#125;int main() &#123;student stu &#x3D; &#123; &quot;张三&quot;,18,100&#125;;&#x2F;&#x2F;值传递printStudent(stu);cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;cout &lt;&lt; endl;&#x2F;&#x2F;地址传递printStudent2(&amp;stu);cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生结构体定义struct student&#123;&#x2F;&#x2F;成员列表string name;  &#x2F;&#x2F;姓名int age;      &#x2F;&#x2F;年龄int score;    &#x2F;&#x2F;分数&#125;;&#x2F;&#x2F;const使用场景void printStudent(const student *stu) &#x2F;&#x2F;加const防止函数体中的误操作&#123;&#x2F;&#x2F;stu-&gt;age &#x3D; 100; &#x2F;&#x2F;操作失败，因为加了const修饰cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;&#125;int main() &#123;student stu &#x3D; &#123; &quot;张三&quot;,18,100 &#125;;printStudent(&amp;stu);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Student&#123;string name;int score;&#125;;struct Teacher&#123;string name;Student sArray[5];&#125;;void allocateSpace(Teacher tArray[] , int len)&#123;string tName &#x3D; &quot;教师&quot;;string sName &#x3D; &quot;学生&quot;;string nameSeed &#x3D; &quot;ABCDE&quot;;for (int i &#x3D; 0; i &lt; len; i++)&#123;tArray[i].name &#x3D; tName + nameSeed[i];for (int j &#x3D; 0; j &lt; 5; j++)&#123;tArray[i].sArray[j].name &#x3D; sName + nameSeed[j];tArray[i].sArray[j].score &#x3D; rand() % 61 + 40;&#125;&#125;&#125;void printTeachers(Teacher tArray[], int len)&#123;for (int i &#x3D; 0; i &lt; len; i++)&#123;cout &lt;&lt; tArray[i].name &lt;&lt; endl;for (int j &#x3D; 0; j &lt; 5; j++)&#123;cout &lt;&lt; &quot;\t姓名：&quot; &lt;&lt; tArray[i].sArray[j].name &lt;&lt; &quot; 分数：&quot; &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;&#125;&#125;&#125;int main() &#123;srand((unsigned int)time(NULL)); &#x2F;&#x2F;随机数种子 头文件 #include &lt;ctime&gt;Teacher tArray[3]; &#x2F;&#x2F;老师数组int len &#x3D; sizeof(tArray) &#x2F; sizeof(Teacher);allocateSpace(tArray, len); &#x2F;&#x2F;创建数据printTeachers(tArray, len); &#x2F;&#x2F;打印数据system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>示例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;英雄结构体struct hero&#123;string name;int age;string sex;&#125;;&#x2F;&#x2F;冒泡排序void bubbleSort(hero arr[] , int len)&#123;for (int i &#x3D; 0; i &lt; len - 1; i++)&#123;for (int j &#x3D; 0; j &lt; len - 1 - i; j++)&#123;if (arr[j].age &gt; arr[j + 1].age)&#123;hero temp &#x3D; arr[j];arr[j] &#x3D; arr[j + 1];arr[j + 1] &#x3D; temp;&#125;&#125;&#125;&#125;&#x2F;&#x2F;打印数组void printHeros(hero arr[], int len)&#123;for (int i &#x3D; 0; i &lt; len; i++)&#123;cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 性别： &quot; &lt;&lt; arr[i].sex &lt;&lt; &quot; 年龄： &quot; &lt;&lt; arr[i].age &lt;&lt; endl;&#125;&#125;int main() &#123;struct hero arr[5] &#x3D;&#123;&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,&#125;;int len &#x3D; sizeof(arr) &#x2F; sizeof(hero); &#x2F;&#x2F;获取数组元素个数bubbleSort(arr, len); &#x2F;&#x2F;排序printHeros(arr, len); &#x2F;&#x2F;打印system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MATLAB基础知识</title>
    <link href="/2024/03/22/MATLABnote/"/>
    <url>/2024/03/22/MATLABnote/</url>
    
    <content type="html"><![CDATA[<h1 id="MATLAB基础知识"><a href="#MATLAB基础知识" class="headerlink" title="MATLAB基础知识"></a>MATLAB基础知识</h1><h2 id="1-1-MATLAB系统环境"><a href="#1-1-MATLAB系统环境" class="headerlink" title="1.1 MATLAB系统环境"></a>1.1 MATLAB系统环境</h2><ul><li><p>…表示续行符</p></li><li><p>设置当前文件夹，使用cd命令</p></li><li><p>用path命令设置文件搜索路径。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">例如： <span class="token function">path</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'e:\work'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="1-2-MATLAB数值数据"><a href="#1-2-MATLAB数值数据" class="headerlink" title="1.2 MATLAB数值数据"></a>1.2 MATLAB数值数据</h2><h3 id="1．数值数据类型的分类"><a href="#1．数值数据类型的分类" class="headerlink" title="1．数值数据类型的分类"></a>1．数值数据类型的分类</h3><h4 id="（1）整型"><a href="#（1）整型" class="headerlink" title="（1）整型"></a>（1）整型</h4><ul><li><p>无符号整数：无符号8位整数、无符号16位整数、无符号32位整数、<br>无符号64位整数。</p></li><li><p>带符号整数：带符号8位整数、带符号16位整数、带符号32位整数、<br>带符号64位整数</p></li><li><p>无符号8位整数数据范围：00000000<del>11111111（0</del>2^8-1）。</p></li><li><p>带符号8位整数数据范围：10000000<del>01111111（-2^7</del>2^7-1）。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token function">int8</span><span class="token punctuation">(</span><span class="token number">129</span><span class="token punctuation">)</span><span class="token comment">%带符号8位整型数据的最大值是127</span>x <span class="token operator">=</span><span class="token number">127</span><span class="token operator">></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">129</span><span class="token punctuation">)</span>x <span class="token operator">=</span><span class="token number">129</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="（2）浮点型"><a href="#（2）浮点型" class="headerlink" title="（2）浮点型"></a>（2）浮点型</h4><ul><li><p>single函数：将其他类型的数据转换为单精度型。</p></li><li><p>double函数：将其他类型的数据转换为双精度型。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token function">class</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>ans <span class="token operator">=</span>double<span class="token operator">></span><span class="token operator">></span> <span class="token function">class</span><span class="token punctuation">(</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ans <span class="token operator">=</span>single<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="（3）复型"><a href="#（3）复型" class="headerlink" title="（3）复型"></a>（3）复型</h4><p>复型数据包括实部和虚部两个部分，实部和虚部默认为双精度型，虚数</p><p>单位用i或j来表示。</p><ul><li><p>real函数：求复数的实部</p></li><li><p>imag函数：求复数的虚部</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token number">6</span><span class="token operator">+</span><span class="token number">5i</span>ans <span class="token operator">=</span><span class="token number">6.0000</span> <span class="token operator">+</span> <span class="token number">5.0000i</span><span class="token operator">></span><span class="token operator">></span> <span class="token number">6</span><span class="token operator">+</span><span class="token number">5j</span>ans <span class="token operator">=</span><span class="token number">6.0000</span> <span class="token operator">+</span> <span class="token number">5.0000i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2．数值数据的输出格式"><a href="#2．数值数据的输出格式" class="headerlink" title="2．数值数据的输出格式"></a>2．数值数据的输出格式</h3><p>format命令的格式：   format 格式符</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> format long<span class="token operator">></span><span class="token operator">></span> <span class="token number">50</span><span class="token operator">/</span><span class="token number">3</span>ans <span class="token operator">=</span><span class="token number">16.666666666666668</span><span class="token operator">></span><span class="token operator">></span> format <span class="token operator">></span><span class="token operator">></span> <span class="token number">50</span><span class="token operator">/</span><span class="token number">3</span>ans <span class="token operator">=</span><span class="token number">16.6667</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意：format命令只影响数据输出格式，而不影响数据的计算和存储。</p><h3 id="3．常用数学函数"><a href="#3．常用数学函数" class="headerlink" title="3．常用数学函数"></a>3．常用数学函数</h3><h4 id="（1）函数的调用格式为：函数名-函数自变量的值"><a href="#（1）函数的调用格式为：函数名-函数自变量的值" class="headerlink" title="（1）函数的调用格式为：函数名(函数自变量的值)"></a>（1）函数的调用格式为：函数名(函数自变量的值)</h4><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>A <span class="token operator">=</span><span class="token number">4</span> <span class="token number">2</span><span class="token number">3</span> <span class="token number">6</span><span class="token operator">></span><span class="token operator">></span> B<span class="token operator">=</span><span class="token function">exp</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>B <span class="token operator">=</span><span class="token number">54.5982</span> <span class="token number">7.3891</span><span class="token number">20.0855</span> <span class="token number">403.4288</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>函数在运算时是将函数逐项作用于矩阵的每个元素上，所以最后运算的结果就是一个与自变量同型的矩阵。</p><h4 id="（2）常用函数的应用"><a href="#（2）常用函数的应用" class="headerlink" title="（2）常用函数的应用"></a>（2）常用函数的应用</h4><p>① 三角函数有以弧度为单位的函数和以角度为单位的函数，如果是以角度为单位的函数就在函数名后面加“d”，以示区别。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">1</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">sind</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>② abs函数可以求实数的绝对值、复数的模、字符串的ASCII码值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">4</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">4i</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">5</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">97</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>③用于取整的函数有fix、floor、ceil、round。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">4.7</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">5</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">fix</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.2</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.6</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">3</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.8</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>round函数是按照四舍五入的规则来取整。</p><p>ceil是向上取整，取大于等于这个数的第一个整数。</p><p>floor是向下取整，取小于等于这个数的第一个整数。</p><p>fix是固定取靠近0的那个整数，也就是舍去小数取整。</p><h2 id="1-3-变量及其操作"><a href="#1-3-变量及其操作" class="headerlink" title="1.3 变量及其操作"></a>1.3 变量及其操作</h2><h3 id="1．变量与赋值语句"><a href="#1．变量与赋值语句" class="headerlink" title="1．变量与赋值语句"></a>1．变量与赋值语句</h3><p>在MATLAB中，变量名是以**<mark><strong>字母</strong></mark>**开头，后接字母、数字或下画线的字符序列，最多63个字符。</p><ul><li><p>变量名区分字母的大小写。</p></li><li><p>标准函数名以及命令名一般用小写字母。</p></li></ul><p>赋值语句两种格式：</p><ul><li><p>变量&#x3D;表达式</p></li><li><p>表达式</p></li></ul><h3 id="2．预定义变量"><a href="#2．预定义变量" class="headerlink" title="2．预定义变量"></a>2．预定义变量</h3><p>预定义变量是在MATLAB工作空间中驻留，由系统本身定义的变量。</p><ul><li><p>ans是默认赋值变量</p></li><li><p>i和j代表虚数单位</p></li><li><p>pi代表圆周率</p></li><li><p>NaN代表非数</p></li></ul><h3 id="3．变量的管理"><a href="#3．变量的管理" class="headerlink" title="3．变量的管理"></a>3．变量的管理</h3><h4 id="1-内存变量的删除与修改"><a href="#1-内存变量的删除与修改" class="headerlink" title="(1)内存变量的删除与修改"></a>(1)内存变量的删除与修改</h4><p>who命令与whos命令</p><h4 id="2-内存变量文件"><a href="#2-内存变量文件" class="headerlink" title="(2)内存变量文件"></a>(2)内存变量文件</h4><p>用于保存MATLAB工作区变量的文件叫做内存变量文件，其扩展名为.mat</p><p>，也叫MAT文件。</p><ul><li><p>save命令：创建内存变量文件</p></li><li><p>load命令：装入内存变量文件</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> save mydata a x<span class="token operator">></span><span class="token operator">></span> load mydata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="1-4-MATLAB矩阵的表示"><a href="#1-4-MATLAB矩阵的表示" class="headerlink" title="1.4 MATLAB矩阵的表示"></a>1.4 MATLAB矩阵的表示</h2><h3 id="1．矩阵的建立"><a href="#1．矩阵的建立" class="headerlink" title="1．矩阵的建立"></a>1．矩阵的建立</h3><h3 id="（1）利用直接输入法建立矩阵"><a href="#（1）利用直接输入法建立矩阵" class="headerlink" title="（1）利用直接输入法建立矩阵:"></a>（1）利用直接输入法建立矩阵:</h3><p>将矩阵的元素用<mark>中括号</mark>括起来，按矩阵行的顺序输入各元素，同一行的各元素之间用<mark>逗号或空格</mark>分隔，不同行的元素之间用<mark>分号</mark>分隔。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>A <span class="token operator">=</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="（2）利用已建好的矩阵建立更大的矩阵"><a href="#（2）利用已建好的矩阵建立更大的矩阵" class="headerlink" title="（2）利用已建好的矩阵建立更大的矩阵:"></a>（2）利用已建好的矩阵建立更大的矩阵:</h3><p>一个大矩阵可以由已经建立好的小矩阵拼接而成。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> C<span class="token operator">=</span><span class="token punctuation">[</span>A<span class="token punctuation">,</span>B<span class="token punctuation">;</span>B<span class="token punctuation">,</span>A<span class="token punctuation">]</span>C <span class="token operator">=</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">6</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token operator">-</span><span class="token number">7</span> <span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token number">9</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">-</span><span class="token number">6</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token operator">-</span><span class="token number">7</span> <span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token number">9</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以用实部矩阵和虚部矩阵构成复数矩阵</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span>B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span>C<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span>A<span class="token operator">=</span>B<span class="token operator">+</span><span class="token number">i</span><span class="token operator">*</span>CA <span class="token operator">=</span><span class="token number">1.0000</span> <span class="token operator">+</span> <span class="token number">6.0000i</span> <span class="token number">2.0000</span> <span class="token operator">+</span> <span class="token number">7.0000i</span> <span class="token number">3.0000</span> <span class="token operator">+</span> <span class="token number">8.0000i</span><span class="token number">4.0000</span> <span class="token operator">+</span> <span class="token number">9.0000i</span> <span class="token number">5.0000</span> <span class="token operator">+</span><span class="token number">10.0000i</span> <span class="token number">6.0000</span> <span class="token operator">+</span><span class="token number">11.0000i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2．冒号表达式"><a href="#2．冒号表达式" class="headerlink" title="2．冒号表达式"></a>2．冒号表达式</h3><p>格式：e1:e2:e3</p><p>初始值：步长：终止值</p><p>省略步长e2，则步长为1。例如，t&#x3D;0:5与t&#x3D;0:1:5等价。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> t<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span>t <span class="token operator">=</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>格式：linspace(a,b,n)</p><p>linspace(第1个元素,最后元素,元素总数)</p><p>当n省略时，自动产生100个元素。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>x <span class="token operator">=</span><span class="token number">0</span> <span class="token number">0.6283</span> <span class="token number">1.2566</span> <span class="token number">1.8850</span> <span class="token number">2.5133</span> <span class="token number">3.1416</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3．结构矩阵和单元矩阵"><a href="#3．结构矩阵和单元矩阵" class="headerlink" title="3．结构矩阵和单元矩阵"></a>3．结构矩阵和单元矩阵</h3><h4 id="（1）结构矩阵"><a href="#（1）结构矩阵" class="headerlink" title="（1）结构矩阵"></a>（1）结构矩阵</h4><p>由结构数据构成的矩阵就是结构矩阵，结构矩阵里的每个元素</p><p>就是结构数据类型。</p><p>格式为：结构矩阵元素.成员名&#x3D;表达式</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x1<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x2<span class="token operator">=</span><span class="token string">'liu'</span><span class="token punctuation">;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x1<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x2<span class="token operator">=</span><span class="token string">'wang'</span><span class="token punctuation">;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">191</span><span class="token punctuation">;</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">578</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x1<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x2<span class="token operator">=</span><span class="token string">'cai'</span><span class="token punctuation">;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">890</span><span class="token punctuation">;</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="（2）单元矩阵"><a href="#（2）单元矩阵" class="headerlink" title="（2）单元矩阵"></a>（2）单元矩阵</h4><p>建立单元矩阵和一般矩阵相似，直接输入就可以了，只是单元矩阵元</p><p>素用大括号括起来。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> b<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'liu'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'wang'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">191</span><span class="token punctuation">;</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">578</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">...</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">'cai'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">890</span><span class="token punctuation">;</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token string">'liu'</span> <span class="token punctuation">[</span><span class="token number">2</span>x2 double<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token string">'wang'</span> <span class="token punctuation">[</span><span class="token number">2</span>x2 double<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token string">'cai'</span> <span class="token punctuation">[</span><span class="token number">2</span>x2 double<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-5-矩阵元素的引用"><a href="#1-5-矩阵元素的引用" class="headerlink" title="1.5 矩阵元素的引用"></a>1.5 矩阵元素的引用</h2><h3 id="1．矩阵元素的引用方式"><a href="#1．矩阵元素的引用方式" class="headerlink" title="1．矩阵元素的引用方式"></a>1．矩阵元素的引用方式</h3><h4 id="（1）通过下标来引用矩阵的元素"><a href="#（1）通过下标来引用矩阵的元素" class="headerlink" title="（1）通过下标来引用矩阵的元素"></a>（1）通过下标来引用矩阵的元素</h4><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%A(3,2)表示A矩阵第3行第2列的元素。</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">200</span><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">10</span>A <span class="token operator">=</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意：如果给出的行下标或列下标大于原来矩阵的行数和列数，那么MATLAB将自动扩展原来的矩阵，并将扩展后没有赋值的矩阵元素置为0。</p><h4 id="（2）通过序号来引用"><a href="#（2）通过序号来引用" class="headerlink" title="（2）通过序号来引用"></a>（2）通过序号来引用</h4><ul><li><p>在MATLAB中，矩阵元素按列存储，即首先存储矩阵的第一列元素，然后存储第二列元素，…，一直到矩阵的最后一列元素。</p></li><li><p>矩阵元素的序号就是矩阵元素在内存中的排列顺序。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>A <span class="token operator">=</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>序号与下标是一一对应的，以m×n矩阵A为例，矩阵元素A(i,j)的序号为(j-1)×m+i</p><p>sub2ind函数：将矩阵中指定元素的行、列下标转换成存储的序号。</p><p>调用格式为：D&#x3D;sub2ind(S,I,J)</p><p>序号&#x3D;sub2ind(行数和列数组成的向量,转换矩阵的行下标,转换矩阵的列标)</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%sub2ind函数举例。</span><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">]</span>A <span class="token operator">=</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token operator">></span><span class="token operator">></span> D<span class="token operator">=</span><span class="token function">sub2ind</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>D <span class="token operator">=</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">6</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>ind2sub函数：将把矩阵元素的序号转换成对应的下标</p><p>其调用格式为：</p><p>[I,J]&#x3D;ind2sub(S,D)</p><p>[行下标,列下标]&#x3D;ind2sub(行数和列数组成的向量,序号)</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%ind2sub函数举例。</span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">[</span>I<span class="token punctuation">,</span>J<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">ind2sub</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>I <span class="token operator">=</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">2</span>J <span class="token operator">=</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2．利用冒号表达式获得子矩阵"><a href="#2．利用冒号表达式获得子矩阵" class="headerlink" title="2．利用冒号表达式获得子矩阵"></a>2．利用冒号表达式获得子矩阵</h3><p>子矩阵是指由矩阵中的一部分元素构成的矩阵。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> 第<span class="token number">i</span>行的全部元素<span class="token function">A</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> 第<span class="token number">j</span>列的全部元素<span class="token function">A</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">+</span>m<span class="token punctuation">,</span>k<span class="token operator">:</span>k<span class="token operator">+</span>m<span class="token punctuation">)</span> 第<span class="token number">i</span>～<span class="token number">i</span><span class="token operator">+</span>m行内且在第k～k<span class="token operator">+</span>m列中的所有元素<span class="token function">A</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">+</span>m<span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> 第<span class="token number">i</span>～<span class="token number">i</span><span class="token operator">+</span>m行的全部元素<span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span>A <span class="token operator">=</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span><span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> ans <span class="token operator">=</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">6</span> <span class="token number">8</span> <span class="token number">10</span><span class="token number">11</span> <span class="token number">13</span> <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>end运算符：表示某一维的末尾元素下标。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span>A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span><span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> ans <span class="token operator">=</span><span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span> <span class="token number">19</span> <span class="token number">20</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span> ans <span class="token operator">=</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token number">18</span> <span class="token number">19</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3．利用空矩阵删除矩阵的元素"><a href="#3．利用空矩阵删除矩阵的元素" class="headerlink" title="3．利用空矩阵删除矩阵的元素"></a>3．利用空矩阵删除矩阵的元素</h3><p>空矩阵是指没有任何元素的矩阵。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>x <span class="token operator">=</span>     <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">%X是一个空矩阵。</span><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>A <span class="token operator">=</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">7</span> <span class="token number">0</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">6</span><span class="token number">1</span> <span class="token number">4</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">8</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>A <span class="token operator">=</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">0</span><span class="token number">7</span> <span class="token number">9</span> <span class="token number">6</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4．改变矩阵的形状"><a href="#4．改变矩阵的形状" class="headerlink" title="4．改变矩阵的形状"></a>4．改变矩阵的形状</h3><p>reshape(A,m,n)：在矩阵总元素保持不变的前提下，将矩阵A重新排成m×n的二维矩阵。</p><p>注意：reshape函数只是改变原矩阵的行数和列数，但并不改变原矩阵元素个数及其存储顺序。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token operator">></span> y<span class="token operator">=</span><span class="token function">reshape</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> y <span class="token number">23</span> <span class="token number">34</span> <span class="token number">98</span> <span class="token number">65</span><span class="token number">45</span> <span class="token number">65</span> <span class="token number">45</span> <span class="token number">43</span><span class="token number">65</span> <span class="token number">34</span> <span class="token number">78</span> <span class="token number">76</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><mark>A(:) </mark>：将矩阵A的每一列元素堆叠起来，成为一个列向量</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> A <span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">;</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">]</span>A <span class="token operator">=</span><span class="token operator">-</span><span class="token number">45</span> <span class="token number">65</span> <span class="token number">71</span><span class="token number">27</span> <span class="token number">35</span> <span class="token number">91</span><span class="token operator">></span><span class="token operator">></span> B<span class="token operator">=</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span>B <span class="token operator">=</span><span class="token operator">-</span><span class="token number">45</span><span class="token number">27</span><span class="token number">65</span><span class="token number">35</span><span class="token number">71</span><span class="token number">91</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>A(:)等价于reshape(A,6,1)。</p><h2 id="1-6-MATLAB基本运算"><a href="#1-6-MATLAB基本运算" class="headerlink" title="1.6 MATLAB基本运算"></a>1.6 MATLAB基本运算</h2><h3 id="1．算术运算"><a href="#1．算术运算" class="headerlink" title="1．算术运算"></a>1．算术运算</h3><h4 id="（1）基本算术运算"><a href="#（1）基本算术运算" class="headerlink" title="（1）基本算术运算"></a>（1）基本算术运算</h4><p>基本算术运算符：＋(加)、－(减)、*(乘)、&#x2F;(右除)、\(左除)、^(乘方)。</p><ul><li><p>MATLAB的算术运算是在矩阵意义下进行的。</p></li><li><p>单个数据的算术运算只是矩阵运算的一种特例。</p></li></ul><p>注意，MATLAB的运算是在矩阵意义下进行的，单个数据的算术运算只</p><p>是矩阵运算的一种特例。</p><p>加减运算</p><ul><li><p>若两矩阵同型，则运算时两矩阵的相应元素相加减。</p></li><li><p>若两矩阵不同型，则MATLAB将给出错误信息。</p></li><li><p>一个标量也可以和矩阵进行加减运算，这时把标量和矩阵的每一个元素进行加减运算。</p></li></ul><p>乘法运算</p><ul><li><p>矩阵A和B进行乘法运算，要求A的列数与B的行数相等，此时则称A、B矩阵是可乘的，或称A和B两矩阵维数和大小相容。</p></li><li><p>如果两者的维数或大小不相容，则将给出错误信息，提示用户两个矩阵是不可乘的</p></li></ul><p>除法运算</p><p>在MATLAB中，有两种矩阵除法运算：右除&#x2F;和左除\。如果A矩阵是非奇异方阵，则B&#x2F;A等效于B*inv(A)，A\B等效于inv(A)*B。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> C1<span class="token operator">=</span>B<span class="token operator">/</span>AC1 <span class="token operator">=</span><span class="token operator">-</span><span class="token number">0.1667</span> <span class="token operator">-</span><span class="token number">3.3333</span> <span class="token number">2.5000</span><span class="token operator">-</span><span class="token number">0.8333</span> <span class="token operator">-</span><span class="token number">7.6667</span> <span class="token number">5.5000</span><span class="token number">12.8333</span> <span class="token number">63.6667</span> <span class="token operator">-</span><span class="token number">36.5000</span><span class="token operator">></span><span class="token operator">></span> C2<span class="token operator">=</span>A<span class="token operator">\</span>BC2 <span class="token operator">=</span><span class="token number">0.5000</span> <span class="token operator">-</span><span class="token number">0.5000</span> <span class="token number">44.5000</span><span class="token number">1.0000</span> <span class="token number">0.0000</span> <span class="token number">46.0000</span><span class="token number">0.5000</span> <span class="token number">1.1667</span> <span class="token operator">-</span><span class="token number">44.8333</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">4</span>ans <span class="token operator">=</span><span class="token number">0.7500</span><span class="token operator">></span><span class="token operator">></span> <span class="token number">4</span><span class="token operator">\</span><span class="token number">3</span>ans <span class="token operator">=</span><span class="token number">0.7500</span><span class="token operator">></span><span class="token operator">></span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10.5</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span>a <span class="token operator">=</span><span class="token number">10.5000</span> <span class="token number">25.0000</span><span class="token operator">></span><span class="token operator">></span> a<span class="token operator">/</span><span class="token number">5</span>ans <span class="token operator">=</span><span class="token number">2.1000</span> <span class="token number">5.0000</span><span class="token operator">></span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">\</span>aans <span class="token operator">=</span><span class="token number">2.1000</span> <span class="token number">5.0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>乘方运算</p><p>一个矩阵的乘方运算可以表示成A^x，要求A为方阵，x为标量。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">^</span><span class="token number">2</span>ans <span class="token operator">=</span><span class="token number">30</span> <span class="token number">36</span> <span class="token number">15</span><span class="token number">66</span> <span class="token number">81</span> <span class="token number">42</span><span class="token number">39</span> <span class="token number">54</span> <span class="token number">69</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="（2）点运算"><a href="#（2）点运算" class="headerlink" title="（2）点运算"></a>（2）点运算</h4><ul><li><p>点运算符：.*、.&#x2F;、.\和.^。</p></li><li><p>两矩阵进行点运算是指它们的对应元素进行相关运算，要求两矩阵同型。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> A<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> B<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> C<span class="token operator">=</span>A<span class="token operator">.*</span>BC <span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">3</span><span class="token number">4</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">8</span> <span class="token number">9</span><span class="token operator">></span><span class="token operator">></span> D<span class="token operator">=</span>A<span class="token operator">*</span>BD <span class="token operator">=</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">10</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">16</span> <span class="token comment">%当x=0.1、0.4、0.7、1时，分别求y=sin x cos x的值。</span><span class="token operator">></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">0.3</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> y<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="2．关系运算"><a href="#2．关系运算" class="headerlink" title="2．关系运算"></a>2．关系运算</h2><ul><li><p>关系运算符：&lt;(小于)、&lt;&#x3D;(小于或等于)、&gt;(大于)、&gt;&#x3D;(大于或等于)、&#x3D;&#x3D;(等于)、～&#x3D;(不等于)。</p></li><li><p>当两个比较量是标量时，直接比较两数的大小。若关系成立，关系表达式结果为1，否则为0。</p></li><li><p>当参与比较的量是两个同型的矩阵时，比较是对两矩阵相同位置的元素按标量关系运算规则逐个进行，最终的关系运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成。</p></li><li><p>当参与比较的一个是标量，而另一个是矩阵时，则把标量与矩阵的每一个元素按标量关系运算规则逐个比较，最终的关系运算的结果是一个与原矩阵同型的矩阵，它的元素由0或1组成。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">></span><span class="token number">4</span>ans <span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span class="token operator">></span> x<span class="token operator">=</span><span class="token number">5</span>x <span class="token operator">=</span><span class="token number">5</span><span class="token operator">></span><span class="token operator">></span> x<span class="token operator">==</span><span class="token number">5</span>ans <span class="token operator">=</span><span class="token number">1</span> <span class="token comment">%建立3阶方阵A，判断A的元素是否为偶数。</span><span class="token operator">></span><span class="token operator">></span> A <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">;</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span>A <span class="token operator">=</span><span class="token number">24</span> <span class="token number">35</span> <span class="token number">13</span><span class="token number">22</span> <span class="token number">63</span> <span class="token number">23</span><span class="token number">39</span> <span class="token number">47</span> <span class="token number">80</span><span class="token operator">></span><span class="token operator">></span> P<span class="token operator">=</span><span class="token function">rem</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span>P <span class="token operator">=</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="3．逻辑运算"><a href="#3．逻辑运算" class="headerlink" title="3．逻辑运算"></a>3．逻辑运算</h2><p>逻辑运算符：&amp;(与)、|(或)和～(非)。</p><p>设参与逻辑运算的是两个标量a和b，那么运算规则为：</p><ul><li><p>a&amp;b a、b全为非零时，运算结果为1，否则为0。</p></li><li><p>a|b a、b中只要有一个为非零时，运算结果为1 。</p></li><li><p>～a 当a为零时，运算结果为1；当a为非零时，运算结果为0。</p></li></ul><h2 id="3．逻辑运算-1"><a href="#3．逻辑运算-1" class="headerlink" title="3．逻辑运算"></a>3．逻辑运算</h2><ul><li><p>若参与逻辑运算的是两个同型矩阵，那么将对矩阵相同位置上的元素按标量规则逐个进行运算，最终运算结果是一个与原矩阵同型的矩阵，其元素由1或0组成。</p></li><li><p>若参与逻辑运算的一个是标量，一个是矩阵，那么将在标量与矩阵中的每个元素之间按标量规则逐个进行运算，最终运算结果是一个与矩阵同型的矩阵，其元素由1或0组成。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">&lt;</span><span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">6</span><span class="token operator">></span><span class="token number">5</span>ans <span class="token operator">=</span><span class="token number">1</span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">1</span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">~</span><span class="token number">9</span><span class="token operator">==</span><span class="token number">1</span>ans <span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>水仙花数是指各位数字的立方之和等于该数本身的三位正整数。</p><p>求全部水仙花数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> m<span class="token operator">=</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> m1<span class="token operator">=</span><span class="token function">rem</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> m2<span class="token operator">=</span><span class="token function">rem</span><span class="token punctuation">(</span><span class="token function">fix</span><span class="token punctuation">(</span>m<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> m3<span class="token operator">=</span><span class="token function">fix</span><span class="token punctuation">(</span>m<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> k<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>m<span class="token operator">==</span>m1<span class="token operator">.*</span>m1<span class="token operator">.*</span>m1<span class="token operator">+</span>m2<span class="token operator">.*</span>m2<span class="token operator">.*</span>m2<span class="token operator">+</span>m3<span class="token operator">.*</span>m3<span class="token operator">.*</span>m3<span class="token punctuation">)</span>k <span class="token operator">=</span><span class="token number">54</span> <span class="token number">271</span> <span class="token number">272</span> <span class="token number">308</span><span class="token operator">></span><span class="token operator">></span> s<span class="token operator">=</span><span class="token function">m</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>s <span class="token operator">=</span><span class="token number">153</span> <span class="token number">370</span> <span class="token number">371</span> <span class="token number">407</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-7-字符串处理"><a href="#1-7-字符串处理" class="headerlink" title="1.7 字符串处理"></a>1.7 字符串处理</h2><h3 id="1．字符串的表示"><a href="#1．字符串的表示" class="headerlink" title="1．字符串的表示"></a>1．字符串的表示</h3><p>在MATLAB中，字符串是用单引号括起来的字符序列。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> xm<span class="token operator">=</span><span class="token string">'Central South University'</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">xm</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">)</span>ans <span class="token operator">=</span>Cen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>若字符串中的字符含有单引号，则该单引号字符要用两个单引号来表示。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token string">'I''m a teacher.'</span>ans <span class="token operator">=</span>I<span class="token operator">'</span>m a teacher<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>建立多行字符串，形成字符串矩阵。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> ch<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'abcdef'</span><span class="token punctuation">;</span><span class="token string">'123456'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">ch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>建立一个字符串向量，然后对该向量做如下处理：</p><p>① 取第1～5个字符组成的子字符串。</p><p>② 将字符串倒过来重新排列。</p><p>③ 将字符串中的小写字母变成相应的大写字母，其余字符不变。</p><p>④ 统计字符串中小写字母的个数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> ch<span class="token operator">=</span><span class="token string">'ABc123d4e56Fg9'</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> subch<span class="token operator">=</span><span class="token function">ch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span> subch <span class="token operator">=</span>ABc12<span class="token operator">></span><span class="token operator">></span> revch<span class="token operator">=</span><span class="token function">ch</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span> revch <span class="token operator">=</span><span class="token number">9</span>gF65e4d321cBA <span class="token operator">></span><span class="token operator">></span> k<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>ch<span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;</span>ch<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span> k <span class="token operator">=</span><span class="token number">3</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">13</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">ch</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">ch</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span> ch <span class="token operator">=</span>ABC123D4E56FG9<span class="token operator">></span><span class="token operator">></span> <span class="token function">length</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> ans <span class="token operator">=</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2．字符串的操作"><a href="#2．字符串的操作" class="headerlink" title="2．字符串的操作"></a>2．字符串的操作</h3><h4 id="（1）-字符串的执行"><a href="#（1）-字符串的执行" class="headerlink" title="（1） 字符串的执行"></a>（1） 字符串的执行</h4><p>格式： eval(s)</p><p>格式： eval(字符串)</p><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> t<span class="token operator">=</span><span class="token keyword">pi</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> m<span class="token operator">=</span><span class="token string">'[t,sin(t),cos(t)]'</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> y<span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>y <span class="token operator">=</span><span class="token number">3.1416</span> <span class="token number">0.0000</span> <span class="token operator">-</span><span class="token number">1.0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="（2）字符串与数值之间的转换"><a href="#（2）字符串与数值之间的转换" class="headerlink" title="（2）字符串与数值之间的转换"></a>（2）字符串与数值之间的转换</h4><ul><li><p>abs和double函数都可以用来获取字符串矩阵所对应的ASCII码数值矩阵。</p></li><li><p>char函数可以把ASCII码矩阵转换为字符串矩阵。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> s1<span class="token operator">=</span><span class="token string">'MATLAB'</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> a<span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>a <span class="token operator">=</span><span class="token number">77</span> <span class="token number">65</span> <span class="token number">84</span> <span class="token number">76</span> <span class="token number">65</span> <span class="token number">66</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">char</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span>ans <span class="token operator">=</span>matlab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="（3）字符串的比较"><a href="#（3）字符串的比较" class="headerlink" title="（3）字符串的比较"></a>（3）字符串的比较</h4><p>字符串的比较有两种方法：利用关系运算符或字符串比较函数。</p><ul><li>关系运算符比较：两个字符串里的每个字符依次按ASCII值大小逐个进行比较，比较的结果是一个数值向量，向量中的元素要么是1，要么是0。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token string">'www0'</span><span class="token operator">>=</span><span class="token string">'W123'</span>ans <span class="token operator">=</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>字符串比较函数用于判断字符串是否相等，有4种比较方式，函数如下：</p><ul><li><p>strcmp(s1,s2)：用来比较字符串s1和s2是否相等，如果相等，返回结果为1，否则返回0。</p></li><li><p>strncmp(s1,s2,n)：用来比较两个字符串前n个字符是否相等，如果相等，返回1，否则返回0。</p></li><li><p>strcmpi(s1,s2)：在忽略字母大小写前提下，比较字符串s1和s2是否相等，如果相等，返回1，否则返回0。</p></li><li><p>strncmpi(s1,s2,n)：在忽略字符串大小写前提下，比较两个字符串前n个字符是否相等，如果相等，返回1，否则返回0。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">'www0'</span><span class="token punctuation">,</span> <span class="token string">'w123'</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">0</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">strncmpi</span><span class="token punctuation">(</span><span class="token string">'Www0'</span><span class="token punctuation">,</span><span class="token string">'w123'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>ans <span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="（4）字符串的查找与替换"><a href="#（4）字符串的查找与替换" class="headerlink" title="（4）字符串的查找与替换"></a>（4）字符串的查找与替换</h4><ul><li><p>findstr(s1,s2)：返回短字符串在长字符串中的开始位置</p></li><li><p>strrep(s1,s2,s3)：将字符串s1中的所有子字符串s2替换为字符串s3。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> p<span class="token operator">=</span><span class="token function">findstr</span><span class="token punctuation">(</span><span class="token string">'This is a test!'</span><span class="token punctuation">,</span><span class="token string">'is'</span><span class="token punctuation">)</span>p <span class="token operator">=</span><span class="token number">3</span> <span class="token number">6</span><span class="token operator">></span><span class="token operator">></span> p<span class="token operator">=</span><span class="token function">findstr</span><span class="token punctuation">(</span><span class="token string">'is'</span><span class="token punctuation">,</span><span class="token string">'This is a test!'</span><span class="token punctuation">)</span>p <span class="token operator">=</span><span class="token number">3</span> <span class="token number">6</span><span class="token operator">></span><span class="token operator">></span> result<span class="token operator">=</span><span class="token function">strrep</span><span class="token punctuation">(</span><span class="token string">'This is a test!'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'class'</span><span class="token punctuation">)</span>result <span class="token operator">=</span>This is a class<span class="token punctuation">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>MATLAB</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>博客日志</title>
    <link href="/2024/03/21/log/"/>
    <url>/2024/03/21/log/</url>
    
    <content type="html"><![CDATA[<h3 id="2024-3-21"><a href="#2024-3-21" class="headerlink" title="2024&#x2F;3&#x2F;21"></a>2024&#x2F;3&#x2F;21</h3><p>替换代码高亮插件为prismjs</p><h3 id="2024-3-20"><a href="#2024-3-20" class="headerlink" title="2024&#x2F;3&#x2F;20"></a>2024&#x2F;3&#x2F;20</h3><p>创建评论系统（失败），二次优化，增加页脚运行时间显示，安装图片加载系统</p><h3 id="2024-3-19"><a href="#2024-3-19" class="headerlink" title="2024&#x2F;3&#x2F;19"></a>2024&#x2F;3&#x2F;19</h3><p>创建博客，初步优化</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言基础(知识版)</title>
    <link href="/2024/03/20/c_learning/"/>
    <url>/2024/03/20/c_learning/</url>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="一-变量"><a href="#一-变量" class="headerlink" title="一.变量"></a>一.变量</h3><h4 id="1-整形变量"><a href="#1-整形变量" class="headerlink" title="1.整形变量"></a>1.整形变量</h4><table><thead><tr><th align="center">类型</th><th align="center">关键字</th><th align="center">类型</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">有符号基本整形</td><td align="center">[signed] int</td><td align="center">无符号短整型</td><td align="center">unsigned short [int]</td></tr><tr><td align="center">无符号基本整形</td><td align="center">unsigned [int]</td><td align="center">有符号长整形</td><td align="center">[signed] long [int]</td></tr><tr><td align="center">有符号短整形</td><td align="center">[signed] short [int]</td><td align="center">无符号长整形</td><td align="center">unsigned long [int]</td></tr></tbody></table><p>[]表示可选部分</p><h4 id="2-实型变量"><a href="#2-实型变量" class="headerlink" title="2.实型变量"></a>2.实型变量</h4><table><thead><tr><th>类型</th><th>单精度类型</th><th>双精度类型</th><th>长双精度类型</th></tr></thead><tbody><tr><td>关键字</td><td>float</td><td>double</td><td>long double</td></tr></tbody></table><h4 id="3-字符型变量"><a href="#3-字符型变量" class="headerlink" title="3.字符型变量"></a>3.字符型变量</h4><p>关键字：char</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="一-算术运算符"><a href="#一-算术运算符" class="headerlink" title="一.算术运算符"></a>一.算术运算符</h3><h4 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a>1.算数运算符</h4><table><thead><tr><th align="center">符号</th><th align="center">功能</th><th align="center">符号</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">正</td><td align="center">%</td><td align="center">取模</td></tr><tr><td align="center">-</td><td align="center">负</td><td align="center">+</td><td align="center">加法</td></tr><tr><td align="center">*</td><td align="center">乘法</td><td align="center">-</td><td align="center">减法</td></tr><tr><td align="center">&#x2F;</td><td align="center">除法</td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="2-自增-自减运算符"><a href="#2-自增-自减运算符" class="headerlink" title="2.自增&#x2F;自减运算符"></a>2.自增&#x2F;自减运算符</h4><p>“++”变量增加1</p><p>“——“变量减少1</p><h3 id="二-关系运算符"><a href="#二-关系运算符" class="headerlink" title="二.关系运算符"></a>二.关系运算符</h3><table><thead><tr><th align="center">符号</th><th align="center">功能</th><th align="center">符号</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td><td align="center">&#x3D;&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">!&#x3D;</td><td align="center">不等于</td></tr></tbody></table><h3 id="三-逻辑运算符"><a href="#三-逻辑运算符" class="headerlink" title="三.逻辑运算符"></a>三.逻辑运算符</h3><table><thead><tr><th align="center">符号</th><th align="center">功能</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与</td><td align="center">全真为真，一假为假</td></tr><tr><td align="center">双竖杠（打符号会出现吞字bug）</td><td align="center">逻辑或</td><td align="center">全假为假，一真为真</td></tr><tr><td align="center">!</td><td align="center">逻辑非</td><td align="center">真为假，假为真</td></tr></tbody></table><h3 id="四-运算符优先级"><a href="#四-运算符优先级" class="headerlink" title="四.运算符优先级"></a>四.运算符优先级</h3><p><img src="/2024/03/20/c_learning/1.jpg" alt="运算符优先级"></p><h2 id="数据输入输出函数"><a href="#数据输入输出函数" class="headerlink" title="数据输入输出函数"></a>数据输入输出函数</h2><h1 id="码不动了，休息-2024-3-20"><a href="#码不动了，休息-2024-3-20" class="headerlink" title="码不动了，休息&#x2F;2024.3.20"></a>码不动了，休息&#x2F;2024.3.20</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MD语法的使用（基于MarkText）</title>
    <link href="/2024/03/20/MDuseforMarkText/"/>
    <url>/2024/03/20/MDuseforMarkText/</url>
    
    <content type="html"><![CDATA[<h2 id="md即markdown文件的基本常用编写语法-是一种快速标记、快速排版语言"><a href="#md即markdown文件的基本常用编写语法-是一种快速标记、快速排版语言" class="headerlink" title=".md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言"></a>.md即markdown文件的基本常用编写语法,是一种快速标记、快速排版语言</h2><h4 id="1-代表标题次序，一个-是最大标题，-其次，以此类推。"><a href="#1-代表标题次序，一个-是最大标题，-其次，以此类推。" class="headerlink" title="1.#代表标题次序，一个#是最大标题，##其次，以此类推。"></a>1.#代表标题次序，一个#是最大标题，##其次，以此类推。</h4><h4 id="2-插入代码框快捷键：ctrl-shift-k，在”Input-Language-Identifier”处可打出适用语言，会自动进行高亮匹配。"><a href="#2-插入代码框快捷键：ctrl-shift-k，在”Input-Language-Identifier”处可打出适用语言，会自动进行高亮匹配。" class="headerlink" title="2.插入代码框快捷键：ctrl+shift+k，在”Input Language Identifier”处可打出适用语言，会自动进行高亮匹配。"></a>2.插入代码框快捷键：<strong>ctrl+shift+k</strong>，在”Input Language Identifier”处可打出适用语言，会自动进行高亮匹配。</h4><h4 id="3-跳出代码块按-ctrl-shift-n"><a href="#3-跳出代码块按-ctrl-shift-n" class="headerlink" title="3.跳出代码块按 :ctrl+shift+n"></a>3.跳出代码块按 :<strong>ctrl+shift+n</strong></h4><h4 id="4-插入列表，快捷键是-ctrl-shift-t"><a href="#4-插入列表，快捷键是-ctrl-shift-t" class="headerlink" title="4.插入列表，快捷键是 ctrl+shift+t"></a>4.插入列表，快捷键是 <strong>ctrl+shift+t</strong></h4><h4 id="5-查找笔记：ctrl-f"><a href="#5-查找笔记：ctrl-f" class="headerlink" title="5.查找笔记：ctrl+f"></a>5.查找笔记：ctrl+f</h4><h4 id="6-图片描述-包名-NO-01-001-jpg）插入图片"><a href="#6-图片描述-包名-NO-01-001-jpg）插入图片" class="headerlink" title="6.![图片描述](.&#x2F;包名&#x2F;NO.01.001.jpg）插入图片"></a>6.![图片描述](.&#x2F;包名&#x2F;NO.01.001.jpg）插入图片</h4><h3 id="7-字体设置斜体、粗体、删除线"><a href="#7-字体设置斜体、粗体、删除线" class="headerlink" title="7.字体设置斜体、粗体、删除线"></a>7.字体设置斜体、粗体、删除线</h3><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">这里显示正文*这里显示的是斜体*_这里显示的倾斜体_**这里显示的文字是加粗了*****这里的文字是倾斜加粗的***~~这里的文字是加下划线的~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><em>这里显示的是斜体</em> <em>这里显示的倾斜体</em> <strong>这里显示的文字是加粗了</strong> <em><strong>这里的文字是倾斜加粗的</strong></em> <del>这里的文字是加下划线的</del></p><h3 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h3><p>（1）无序列表 使用 星号*，加号+，减号- 表示无序列表。</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">* 无序列表文字* 无序列表文字* 无序列表文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>（2）有序列表 有序列表则使用数字接着一个英文句点： 注意：英文句点后面一定要有一个空格，起到缩进的作用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">1. 有序列表2. 有序列表3. 有序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World（该文章为Hexo自带，有做删改）</title>
    <link href="/2024/03/19/hello-world/"/>
    <url>/2024/03/19/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server（可在本地运行以作测试）"><a href="#Run-server（可在本地运行以作测试）" class="headerlink" title="Run server（可在本地运行以作测试）"></a>Run server（可在本地运行以作测试）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files（生成静态文件，好习惯）"><a href="#Generate-static-files（生成静态文件，好习惯）" class="headerlink" title="Generate static files（生成静态文件，好习惯）"></a>Generate static files（生成静态文件，好习惯）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites（上传）"><a href="#Deploy-to-remote-sites（上传）" class="headerlink" title="Deploy to remote sites（上传）"></a>Deploy to remote sites（上传）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li>每次无论 <code>hexo g</code> 或 <code>hexo s</code>，都最好先使用 <code>hexo clean</code> 清除本地缓存；</li><li>关于fluid配置<a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册 (fluid-dev.com)</a></li></ul><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
